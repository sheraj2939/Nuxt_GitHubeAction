name: Auto-pull on Production Server, on PR merge for release-prod

on:
  pull_request:
    branches:
      - release-prod
    types:
      - closed

env:
  email_from: devops@houzeo.com
  email_to: sheraj.ahamad@houzeo.com
  email_sendgrid_key: ${{ secrets.SENDGRID_API_KEY }}
  email_subject: "Nuxt Production Deployment | PR #${{ github.event.pull_request.number }} | ${{ github.event.pull_request.title }}"
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PR_URL: ${{ github.event.pull_request.html_url }}
  PR_MERGED_BY: ${{ github.event.pull_request.merged_by.login }}
  REPO_OWNER: ${{ github.event.repository.owner.login }}
  REPO_NAME: ${{ github.event.repository.name }}
  TOKEN: ${{ secrets.TOKEN_GITHUB }}
  APPROVED: false

jobs:
  manual_approval:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release-prod'
    runs-on: ubuntu-latest
    outputs:
      approval_status: ${{ env.APPROVAL_STATUS }}
    
    steps:
      - name: Get current timestamp
        id: timestamp
        run: echo "TIMESTAMP_START=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
      
      - name: Send Deployment Started Email via SendGrid
        run: |          
          echo "key: ${{ env.email_sendgrid_key }}"
          echo "to: ${{ env.email_to }}"
          echo "from: ${{ env.email_from }}"
          echo "subject: ${{ env.email_subject }}"
          
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                    {
                      "email":"${{ env.email_to }}"
                    }
                  ],
                  "subject": "${{ env.email_subject }}"
                }
              ],
              "from": {
                "email":"${{ env.email_from }}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "The <strong>deployment has started</strong> for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>PR merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_START }}</strong>"
                }
              ]
            }'

      - name: Create Approval Issue
        id: create_issue
        run: |
          ISSUE_BODY="Please approve or deny the deployment of PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br><br><br><ul><li>Type <strong>approved</strong> for approving the request</li><li>Type <strong>deny</strong> for denying the request</li></ul><br><span>Note: Add the comment and click on Close with Comment button</span>"
      
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\":\"Deployment Approval for PR ${{ env.PR_NUMBER }}\", \"body\":\"$ISSUE_BODY\"}" \
            "https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/issues")
      
          ISSUE_NUMBER=$(echo "$response" | jq -r '.number')
          ISSUE_URL=$(echo "$response" | jq -r '.html_url')
          
          echo "Approval issue created: $ISSUE_URL"
          echo "issue number: $ISSUE_NUMBER"
          echo "$response" | jq .
          echo "$response" | jq '.data'
      
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
          echo "Approval issue created: $ISSUE_URL"

          
      - name: Send Create Approval Mail
        id: send_create_approval_mail
        run: |
         
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                     {
                      "email":"${{env.email_to}}"
                    }
                  ],
                  "subject": "${{env.email_subject}}"
                }
              ],
              "from": {
                "email":"${{env.email_from}}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "Please approve or reject the workflow for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>Merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Check issue <a href='${{ env.ISSUE_URL }}'>#${{ env.ISSUE_NUMBER }}</a> and approve or deny"
                }
              ]
            }'
            
      - name: Wait for Approval
        id: wait_for_approval
        timeout-minutes: 15
        env:
          AUTHORIZED_APPROVERS: ${{ secrets.AUTHORIZED_APPROVERS }}
        run: |
              echo "Outcome: ${{ steps.wait_for_approval.outcome }}"
              echo "Waiting for approval..."
              AUTHORIZED_APPROVAL=""
              REMINDER_SENT=false  # Flag to track whether a reminder has been sent
              
              while [ -z "$AUTHORIZED_APPROVAL" ]; do
                response=$(curl -s -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments")
          
                echo "Response: $response"
          
                COMMENTS=$(echo "$response" | jq -r '.[].body')
                AUTHORS=$(echo "$response" | jq -r '.[].user.login')
                echo "Comments: $COMMENTS"
                echo "Authors: $AUTHORS"
          
                INDEX_OF_APPROVED=$(echo "$COMMENTS" | grep -n "approved" | tail -n 1 | cut -d ':' -f1)
                echo "$INDEX_OF_APPROVED"
          
                INDEX_OF_DENY=$(echo "$COMMENTS" | grep -n "deny" | tail -n 1 | cut -d ':' -f1)
                echo "$INDEX_OF_DENY"
          
                if [ -n "$INDEX_OF_APPROVED" ]; then
                  APPROVAL_AUTHOR=$(echo "$AUTHORS" | head -n "$INDEX_OF_APPROVED" | tail -1)
                  echo "Found Author $APPROVAL_AUTHOR"
                  if [[ ",${{ env.AUTHORIZED_APPROVERS }}," == *",$APPROVAL_AUTHOR,"* ]]; then
                    echo "Latest comment contains 'approved' by an authorized user: $APPROVAL_AUTHOR"
                    AUTHORIZED_APPROVAL="approved"
                    echo "APPROVAL_STATUS=approved" >> $GITHUB_ENV
                    echo "AUTHOR=$APPROVAL_AUTHOR" >> $GITHUB_ENV
                    break
                  else
                    echo "Latest comment contains 'approved' but not by an authorized user."
                  fi 
                else
                  echo "No 'approved' comments found."
                fi
          
                if [ -z "$AUTHORIZED_APPROVAL" ]; then
                  if [ -n "$INDEX_OF_DENY" ]; then
                    DENY_AUTHOR=$(echo "$AUTHORS" | head -n "$INDEX_OF_DENY" | tail -1)
                    echo "Found Author $DENY_AUTHOR"
                    if [[ ",${{ env.AUTHORIZED_APPROVERS }}," == *",$DENY_AUTHOR,"* ]]; then
                      echo "Latest comment contains 'deny' by an authorized user: $DENY_AUTHOR"
                      AUTHORIZED_APPROVAL="deny"
                      echo "APPROVAL_STATUS=deny" >> $GITHUB_ENV
                      echo "AUTHOR=$DENY_AUTHOR" >> $GITHUB_ENV
                      break
                    else
                      echo "Latest comment contains 'deny' but not by an authorized user."
                    fi 
                  else
                    echo "No 'deny' comments found."
                  fi
                fi
          
                if [ "$TIMEOUT" == "false" ]; then
                  sleep 15  # Adjust the polling interval as needed
                fi
                
                # Check if it's time to send a reminder email
                ELAPSED_TIME=$(($SECONDS / 60))  # Convert seconds to minutes
                if [ $ELAPSED_TIME -ge 07 ] && [ "$REMINDER_SENT" == "false" ]; then  # Change 07 to the desired reminder time in minutes
                  # Send reminder email
                  echo "Sending reminder email..."
                  # Your email sending logic here
          
                  curl --request POST \
                    --url https://api.sendgrid.com/v3/mail/send \
                    --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
                    --header "Content-Type: application/json" \
                    --data '{
                      "personalizations": [
                        {
                          "to": [
                            {
                              "email":"${{env.email_to}}"
                            }
                          ],
                          "subject": "${{env.email_subject}}"
                        }
                      ],
                      "from": {
                        "email":"${{env.email_from}}"
                      },
                      "content": [
                        {
                          "type": "text/html",
                          "value": "Reminder Email for Approval / Denial"
                        }
                      ]
                    }'
          
                  REMINDER_SENT=true  # Set the flag to true to indicate that a reminder has been sent
                fi
              done
          
              # Check if approval has timed out after the loop completes
              if [ -z "$AUTHORIZED_APPROVAL" ]; then
                echo "TIMED_OUT=true" >> $GITHUB_ENV
              fi
          
              sleep 15  # Adjust the polling interval as needed

      - name: Get current timestamp
        if: always()
        id: timestamp_approved_denied
        run: echo "TIMESTAMP_APPROVED_DENIED=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
                           
      - name: Send Approved By Mail
        id: send_approved_by_mail
        if: env.APPROVAL_STATUS == 'approved'
        run: |
         
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                     {
                      "email":"${{env.email_to}}"
                    }
                  ],
                  "subject": "${{env.email_subject}}"
                }
              ],
              "from": {
                "email":"${{env.email_from}}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "Approval Received for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>Merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Approved by: <strong>${{ env.AUTHOR }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_APPROVED_DENIED }}</strong><br>"
                }
              ]
            }'

      - name: Send Deny By Mail
        id: send_deny_by_mail
        if: env.APPROVAL_STATUS == 'deny'
        run: |
         
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                     {
                      "email":"${{env.email_to}}"
                    }
                  ],
                  "subject": "${{env.email_subject}}"
                }
              ],
              "from": {
                "email":"${{env.email_from}}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "Denial Received for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>Merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Denied by: <strong>${{ env.AUTHOR }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_APPROVED_DENIED }}</strong><br>"
                }
              ]
            }'

      - name: Send Timeout Notification
        if:  failure() && steps.wait_for_approval.outcome == 'failure'
        run: |
         
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                     {
                      "email":"${{env.email_to}}"
                    }
                  ],
                  "subject": "${{env.email_subject}}"
                }
              ],
              "from": {
                "email":"${{env.email_from}}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "Time-out Received for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>Merged by: <strong>${{ env.PR_MERGED_BY }}"
                }
              ]
            }'
      - name: Get current timestamp
        if: always()
        id: timestamp_failed
        run: echo "TIMESTAMP_FAILED=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV  

      - name: Send Failure Notification 1
        # This ensures this step runs only if there's a failure in the previous steps
        if: failure() && steps.wait_for_approval.outcome != 'failure'
        run: |
            echo "Outcome: ${{ steps.wait_for_approval.outcome }}" 
            curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "${{ env.email_to }}"
                    }
                  ],
                  "subject": "${{ env.email_subject }}"
                }
              ],
              "from": {
                "email": "${{ env.email_from }}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "The <strong>deployment has <span style=\"color:red;\">FAILED</span></strong> for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>PR merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_FAILED }}</strong><br>Please visit Actions tab to view the Workflow"
                }
              ]
            }'
            
  deploy:
    name: Deploy Nuxt App
    runs-on: self-hosted
    needs: manual_approval
    if: needs.manual_approval.outputs.approval_status == 'approved'
    steps:
      - name: Run deployment script on self-hosted runner
        run: |
          pwd
          ls -l /home/Houzeo/
          ls -l /home/Houzeo/nuxt-deploy.sh
          cd /home/Houzeo
          sudo bash nuxt-deploy.sh

      - name: Get current timestamp
        id: timestamp
        run: echo "TIMESTAMP_END=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Send Deployment Completed Email via SendGrid
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations":  [
                {
                  "to": [
                    {
                      "email":"${{ env.email_to }}"
                    }
                  ],
                  "subject": "${{ env.email_subject }}"
                }
              ],
              "from": {
                "email":"${{ env.email_from }}"
              },
              "content": [
                {
                  "type": "text/html",
                 
                  "value": "The <strong>deployment has Completed</strong> for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>PR merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_END }}</strong>"
                }
              ]
            }'
      - name: Get current timestamp
        if: always()
        id: timestamp_failed
        run: echo "TIMESTAMP_FAILED=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
      
      - name: Send Failure Notification 2
        if: failure()  # This ensures this step runs only if there's a failure in the previous steps
        run: |
          echo "TIMESTAMP_failed=timestamp::$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations":  [
                {
                  "to": [
                    {
                      "email":"${{ env.email_to }}"
                    }
                  ],
                  "subject": "${{ env.email_subject }}"
                }
              ],
              "from": {
                "email":"${{ env.email_from }}"
              },
              "content": [
                {
                  "type": "text/html",
                  "value": "The <strong>deployment has <span style='color:red;'>FAILED</span></strong> for PR<a href='${{ env.PR_URL }}'> #${{ env.PR_NUMBER }}</a><br>PR merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_FAILED }}</strong><br>Please visit Actions tab to view the Workflow"
                }
              ]
            }'
