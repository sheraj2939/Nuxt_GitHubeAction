name: Production Deployment Approval

on:
  pull_request:
    types:
      - closed

jobs:
  deployment_approval:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "EMAIL_FROM=devops@houzeo.com" >> $GITHUB_ENV
          echo "EMAIL_TO=sheraj.ahamad@houzeo.com" >> $GITHUB_ENV
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
          echo "TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "AUTHORIZED_APPROVERS=${{ secrets.AUTHORIZED_APPROVERS }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "PR_MERGED_BY=${{ github.event.pull_request.merged_by.login }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "EMAIL_SUBJECT=Nuxt Production Deployment | PR #${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TIMESTAMP_START=$(date)" >> $GITHUB_ENV

      - name: Send email notification about deployment start (via SendGrid)
        run: |
          SENDGRID_DATA='{
            "personalizations": [
              {
                "to": [{"email": "'"$EMAIL_TO"'"}],
                "subject": "'"$EMAIL_SUBJECT"'"
              }
            ],
            "from": {"email": "'"$EMAIL_FROM"'"},
            "content": [
              {
                "type": "text/html",
                "value": "Deployment has started for PR <a href=\"$PR_URL\">#${PR_NUMBER}</a><br>Merged by: <strong>${PR_MERGED_BY}</strong><br>Timestamp: <strong>${TIMESTAMP_START}</strong>"
              }
            ]
          }'
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer $SENDGRID_API_KEY" \
            --header "Content-Type: application/json" \
            --data "$SENDGRID_DATA"

      - name: Create GitHub issue for approval
        run: |
          ISSUE_BODY="Please approve or deny the deployment of PR <a href='$PR_URL'>#${PR_NUMBER}</a><br><ul><li>Type <strong>approved</strong></li><li>Type <strong>deny</strong></li></ul>"
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $TOKEN" \
            -d "{\"title\":\"Deployment Approval for PR $PR_NUMBER\", \"body\":\"$ISSUE_BODY\"}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues")
          
          ISSUE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          ISSUE_URL=$(echo "$RESPONSE" | jq -r '.html_url')

          if [ "$ISSUE_NUMBER" != "null" ]; then
            echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
            echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
          else
            echo "Error creating GitHub issue: $RESPONSE"
            exit 1
          fi

      - name: Send email with approval link (via SendGrid)
        run: |
          SENDGRID_DATA='{
            "personalizations": [
              {
                "to": [{"email": "'"$EMAIL_TO"'"}],
                "subject": "'"$EMAIL_SUBJECT"'"
              }
            ],
            "from": {"email": "'"$EMAIL_FROM"'"},
            "content": [
              {
                "type": "text/html",
                "value": "Please approve or deny the deployment of PR <a href=\"$PR_URL\">#${PR_NUMBER}</a><br>Check issue <a href=\"$ISSUE_URL\">#${ISSUE_NUMBER}</a>"
              }
            ]
          }'
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer $SENDGRID_API_KEY" \
            --header "Content-Type: application/json" \
            --data "$SENDGRID_DATA"

      - name: Wait for approval on GitHub issue
        run: |
          echo "Waiting for approval on issue $ISSUE_URL..."
          # Logic to wait for approval goes here
          # This could be a manual step or additional GitHub Actions logic based on approvals
          approval_status="pending"
          echo "approval_status=$approval_status" >> $GITHUB_OUTPUT
