name: ðŸš€ Nuxt App CI/CD Deployment

on:
  pull_request:
    branches:
      - release-prod
    types:
      - closed

env:
  email_from: "devops@houzeo.com"
  email_to: "sheraj.ahamad@houzeo.com"
  email_sendgrid_key: ${{ secrets.SENDGRID_API_KEY }}
  email_subject: "ðŸš€ Nuxt Production Deployment | PR #${{ github.event.pull_request.number }} | ${{ github.event.pull_request.title }}"
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PR_URL: ${{ github.event.pull_request.html_url }}
  PR_MERGED_BY: ${{ github.event.pull_request.merged_by.login }}
  REPO_OWNER: ${{ github.event.repository.owner.login }}
  REPO_NAME: ${{ github.event.repository.name }}
  TOKEN: ${{ secrets.TOKEN_GITHUB }}
  AWS_REGION: "us-east-1"
  CLOUDFRONT_DISTRIBUTION_ID: "E1EIX7TDI2X6Z5"
  Script_Path: "/home/Houzeo/nuxt-deploy.sh"
  APPROVED: false

jobs:
  Manual_Approval:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      approval_status: ${{ steps.set_approval.outputs.approval_status }}
    steps:
      - name: Get timestamp
        run: echo "TIMESTAMP_START=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Send Deployment Started Email
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [{
                "to": [{"email":"${{ env.email_to }}"}],
                "subject": "${{ env.email_subject }}"
              }],
              "from": { "email":"${{ env.email_from }}" },
              "content": [{
                "type": "text/html",
                "value": "The <strong>deployment has started</strong> for PR <a href=\"${{ env.PR_URL }}\">#${{ env.PR_NUMBER }}</a><br>PR merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_START }}</strong>"
              }]
            }'

      - name: Create Approval Issue
        id: create_issue
        run: |
          body="Please approve or deny the deployment of PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br><br><br><ul><li>Type <strong>approved</strong> for approving the request</li><li>Type <strong>deny</strong> for denying the request</li></ul><br><span>Note: Add the comment and click on Close with Comment button</span>"
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\":\"Deployment Approval for PR ${{ env.PR_NUMBER }}\", \"body\":\"$body\"}" \
            "https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/issues")
          echo "ISSUE_NUMBER=$(echo "$response" | jq -r '.number')" >> $GITHUB_ENV
          echo "ISSUE_URL=$(echo "$response" | jq -r '.html_url')" >> $GITHUB_ENV


      - name: Send Approval Request Email
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [{
                "to": [{"email":"${{ env.email_to }}"}],
                "subject": "${{ env.email_subject }}"
              }],
              "from": { "email":"${{ env.email_from }}" },
              "content": [{
                "type": "text/html",
                "value": "Please approve or reject the workflow for PR <a href='${{ env.PR_URL }}'>#${{ env.PR_NUMBER }}</a><br>Merged by: <strong>${{ env.PR_MERGED_BY }}</strong><br>Check issue <a href='${{ env.ISSUE_URL }}'>#${{ env.ISSUE_NUMBER }}</a> and approve or deny"
              }]
            }'

      - name: Wait for Approval
        id: set_approval
        timeout-minutes: 15
        env:
          AUTHORIZED_APPROVERS: ${{ secrets.AUTHORIZED_APPROVERS }}
        run: |
          echo "Waiting for approval..."
          SECONDS=0
          REMINDER_SENT=false
          APPROVAL_STATUS=""
          while [ -z "$APPROVAL_STATUS" ] && [ $SECONDS -lt 900 ]; do
            comments=$(curl -s -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments")
            comment_texts=$(echo "$comments" | jq -r '.[].body')
            authors=$(echo "$comments" | jq -r '.[].user.login')

            index_approved=$(echo "$comment_texts" | grep -in 'approved' | cut -d: -f1 | tail -n1)
            index_deny=$(echo "$comment_texts" | grep -in 'deny' | cut -d: -f1 | tail -n1)

            if [ -n "$index_approved" ]; then
              author=$(echo "$authors" | sed -n "${index_approved}p")
              if [[ ",${AUTHORIZED_APPROVERS}," == *",$author,"* ]]; then
                echo "approval_status=approved" >> $GITHUB_OUTPUT
                echo "AUTHOR=$author" >> $GITHUB_ENV
                echo "TIMESTAMP_APPROVED_DENIED=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
                exit 0
              fi
            elif [ -n "$index_deny" ]; then
              author=$(echo "$authors" | sed -n "${index_deny}p")
              if [[ ",${AUTHORIZED_APPROVERS}," == *",$author,"* ]]; then
                echo "approval_status=deny" >> $GITHUB_OUTPUT
                echo "AUTHOR=$author" >> $GITHUB_ENV
                echo "TIMESTAMP_APPROVED_DENIED=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
                exit 0
              fi
            fi

            if [ $SECONDS -ge 420 ] && [ "$REMINDER_SENT" = false ]; then
              echo "Sending reminder email..."
              curl --request POST \
                --url https://api.sendgrid.com/v3/mail/send \
                --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
                --header "Content-Type: application/json" \
                --data '{
                  "personalizations": [{
                    "to": [{"email":"${{ env.email_to }}"}],
                    "subject": "[Reminder] ${{ env.email_subject }}"
                  }],
                  "from": { "email":"${{ env.email_from }}" },
                  "content": [{
                    "type": "text/html",
                    "value": "<strong>Reminder:</strong> Approval still pending for PR <a href=\"${{ env.PR_URL }}\">#${{ env.PR_NUMBER }}</a><br>Check Issue: <a href=\"${{ env.ISSUE_URL }}\">#${{ env.ISSUE_NUMBER }} and approve or deny</a>"
                  }]
                }'
              REMINDER_SENT=true
            fi

            sleep 15
          done
          echo "approval_status=timeout" >> $GITHUB_OUTPUT

      - name: Final Timestamp
        run: echo "TIMESTAMP_FINAL=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Send Approval Result Email
        if: always()
        run: |
          status="${{ steps.set_approval.outputs.approval_status }}"
          if [ "$status" == "approved" ]; then
            message="Approval status for PR #${{ env.PR_NUMBER }}: Approved<br>Approved by: <strong>${{ env.AUTHOR }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_APPROVED_DENIED }}</strong>"
          elif [ "$status" == "deny" ]; then
            message="Approval status for PR #${{ env.PR_NUMBER }}: Denied<br>Denied by: <strong>${{ env.AUTHOR }}</strong><br>Timestamp: <strong>${{ env.TIMESTAMP_APPROVED_DENIED }}</strong>"
          else
            message="Approval status for PR <a href=\"${{ env.PR_URL }}\">#${{ env.PR_NUMBER }}</a>: <strong>Timed Out</strong>"
          fi

          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ env.email_sendgrid_key }}" \
            --header "Content-Type: application/json" \
            --data "{
              \"personalizations\": [{
                \"to\": [{\"email\":\"${{ env.email_to }}\"}],
                \"subject\": \"${{ env.email_subject }}\"
              }],
              \"from\": { \"email\": \"${{ env.email_from }}\" },
              \"content\": [{
                \"type\": \"text/html\",
                \"value\": \"$message\"
              }]
            }"

  Deploy_If_Approved:
    needs: Manual_Approval
    if: needs.Manual_Approval.outputs.approval_status == 'approved'
    runs-on: self-hosted
    steps:
      - name: Run Nuxt Deploy Script
        run: sudo bash ${{ env.Script_Path }}
