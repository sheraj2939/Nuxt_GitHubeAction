name: Auto-pull on Nuxt Production Server, on PR merge for release-prod

on:
  pull_request:
    branches:
      - release-prod
    types:
      - closed

jobs:
  manual_approval:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release-prod'
    runs-on: ubuntu-latest
    outputs:
      approval_status: ${{ steps.wait_for_approval.outputs.approval_status }}

    env:
      EMAIL_FROM: devops@houzeo.com
      EMAIL_TO: sheraj.ahamad@houzeo.com
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      TOKEN: ${{ secrets.TOKEN_GITHUB }}
      AUTHORIZED_APPROVERS: ${{ secrets.AUTHORIZED_APPROVERS }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_URL: ${{ github.event.pull_request.html_url }}
      PR_MERGED_BY: ${{ github.event.pull_request.merged_by.login }}
      REPO_OWNER: ${{ github.event.repository.owner.login }}
      REPO_NAME: ${{ github.event.repository.name }}
      EMAIL_SUBJECT: "Nuxt Production Deployment | PR #${{ github.event.pull_request.number }} | ${{ github.event.pull_request.title }}"

    steps:
      - name: Set start timestamp
        run: echo "TIMESTAMP_START=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Send Deployment Started Email via SendGrid
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer $SENDGRID_API_KEY" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [{
                "to": [{"email":"'"$EMAIL_TO"'"}],
                "subject": "'"$EMAIL_SUBJECT"'"
              }],
              "from": {"email":"'"$EMAIL_FROM"'"},
              "content": [{
                "type": "text/html",
                "value": "Deployment has started for PR <a href=''"$PR_URL"'">#'"$PR_NUMBER"'</a><br>Merged by: <strong>'"$PR_MERGED_BY"'</strong><br>Timestamp: <strong>'"$TIMESTAMP_START"'</strong>"
              }]
            }'

      - name: Create Approval Issue
        id: create_issue
        run: |
          ISSUE_BODY="Please approve or deny the deployment of PR <a href='$PR_URL'>#${PR_NUMBER}</a><br><ul><li>Type <strong>approved</strong></li><li>Type <strong>deny</strong></li></ul>"
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $TOKEN" \
            -d "{\"title\":\"Deployment Approval for PR $PR_NUMBER\", \"body\":\"$ISSUE_BODY\"}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues")
          ISSUE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          ISSUE_URL=$(echo "$RESPONSE" | jq -r '.html_url')
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV

      - name: Send Approval Email via SendGrid
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer $SENDGRID_API_KEY" \
            --header "Content-Type: application/json" \
            --data '{
              "personalizations": [{
                "to": [{"email":"'"$EMAIL_TO"'"}],
                "subject": "'"$EMAIL_SUBJECT"'"
              }],
              "from": {"email":"'"$EMAIL_FROM"'"},
              "content": [{
                "type": "text/html",
                "value": "Please approve or deny the deployment of PR <a href=''"$PR_URL"'">#'"$PR_NUMBER"'</a><br>Check issue <a href=''"$ISSUE_URL"'">#$ISSUE_NUMBER</a>"
              }]
            }'

      - name: Wait for Approval
        id: wait_for_approval
        timeout-minutes: 15
        run: |
          echo "approval_status=pending" >> $GITHUB_OUTPUT
          echo "Waiting for approval on issue $ISSUE_NUMBER..."
          REMINDER_SENT=false
          for i in {1..60}; do
            RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_NUMBER/comments")
            COMMENTS=$(echo "$RESPONSE" | jq -r '.[].body')
            AUTHORS=$(echo "$RESPONSE" | jq -r '.[].user.login')
            INDEX_APPROVED=$(echo "$COMMENTS" | grep -in "^approved$" | tail -1 | cut -d':' -f1)
            INDEX_DENY=$(echo "$COMMENTS" | grep -in "^deny$" | tail -1 | cut -d':' -f1)
            if [ -n "$INDEX_APPROVED" ]; then
              AUTHOR=$(echo "$AUTHORS" | sed -n "${INDEX_APPROVED}p")
              if [[ ",$AUTHORIZED_APPROVERS," == *",$AUTHOR,"* ]]; then
                echo "Approved by $AUTHOR"
                echo "approval_status=approved" >> $GITHUB_OUTPUT
                echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
                break
              fi
            elif [ -n "$INDEX_DENY" ]; then
              AUTHOR=$(echo "$AUTHORS" | sed -n "${INDEX_DENY}p")
              if [[ ",$AUTHORIZED_APPROVERS," == *",$AUTHOR,"* ]]; then
                echo "Denied by $AUTHOR"
                echo "approval_status=deny" >> $GITHUB_OUTPUT
                echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
                break
              fi
            fi
            if [ "$i" -eq 7 ] && [ "$REMINDER_SENT" = false ]; then
              echo "Sending reminder email..."
              curl --request POST \
                --url https://api.sendgrid.com/v3/mail/send \
                --header "Authorization: Bearer $SENDGRID_API_KEY" \
                --header "Content-Type: application/json" \
                --data '{
                  "personalizations": [{
                    "to": [{"email":"'"$EMAIL_TO"'"}],
                    "subject": "'"$EMAIL_SUBJECT"'"
                  }],
                  "from": {"email":"'"$EMAIL_FROM"'"},
                  "content": [{
                    "type": "text/html",
                    "value": "Reminder: Please approve or deny the deployment of PR <a href=''"$PR_URL"'">#'"$PR_NUMBER"'</a><br>Check issue <a href=''"$ISSUE_URL"'">#$ISSUE_NUMBER</a>"
                  }]
                }'
              REMINDER_SENT=true
            fi
            sleep 10
          done
